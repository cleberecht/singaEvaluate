collector_hash[["AQP2-ATP-PKAC"]]
View(collector_hash)
collector_hash <- new.env(hash = TRUE)
for (entry_index in 1:nrow(entity_mapping)) {
entry <- entity_mapping[entry_index,]
collector_hash[[entry$entity]] <- entry$collector
}
collector_hash[["AQP2-P"]]
collector_hash <- new.env(hash = TRUE)
for (entry_index in 1:nrow(entity_mapping)) {
entry <- entity_mapping[entry_index,]
collector_hash[[entry$entity]] <- entry$collector
}
collector_hash[["AQP2"]]
entity_mapping
# create hash environment
collector_hash <- new.env(hash = TRUE)
# add entity mapping
for (entry_index in 1:nrow(entity_mapping)) {
entry <- entity_mapping[entry_index,]
collector_hash[[entry$entity]] <- entry$collector
}
# apply transformations
trajectory %>%
mutate(entity = collector_hash[[entity]])
collector_hash[["AQP2"]]
collector_hash <- new.env(hash = TRUE)
# add entity mapping
for (entry_index in 1:nrow(entity_mapping)) {
entry <- entity_mapping[entry_index,]
collector_hash[[entry$entity]] <- entry$collector
}
# apply transformations
trajectory %>%
mutate(entity = collector_hash[[entity]])
trajectory %>%
mutate(entity = mget(entity, envir = collector_hash))
summarized_trajectory = trajectory %>%
mutate(entity = mget(entity, envir = collector_hash))
View(summarized_trajectory)
str(summarized_trajectory)
summarized_trajectory
summarized_trajectory = trajectory %>%
mutate(entity = unlist(mget(entity, envir = collector_hash)))
summarized_trajectory
summarized_trajectory = trajectory %>%
mutate(entity = unlist(mget(entity, envir = collector_hash))) %>%
group_by(time, node, section, entity) %>%
summarise(concentration = sum(concentration))
summarized_trajectory
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
entity_filter <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
entity_mapping <- extract_species(file) %>%
map_collector(entity_filter)
trajectory <- parse_concentrations(file, select_entities = pull(entity_mapping)) %>%
summarize_concentrations(entity_mapping)
trajectory
# get devtools
if (!require('devtools')) {
install.packages("devtools")
library(devtools)
}
# get roxygen2
if (!require('roxygen2')) {
devtools::install_github("klutometis/roxygen")
library(roxygen2)
}
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/trajectory.json"
parse_vesicle_trajectories(file)
entity_filter <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
entity_mapping <- extract_species(file) %>%
map_collector(entity_filter)
trajectory <- parse_concentrations(file, select_entities = pull(entity_mapping)) %>%
summarize_concentrations(entity_mapping)
View(trajectory)
log_file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/variations.json"
data_raw <- fromJSON(log_file) %>%
# unnest dataframe
unnest(cols = c(content)) %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier)) %>%
# reduce data
select(folder_name, identifier, name, quantity)
data_raw <- fromJSON(log_file)
View(data_raw)
data_raw <- fromJSON(log_file) %>%
# unnest list
unnest(cols = c(content)) %>%
# unnest dataframe
unnest(cols = c(content)) %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier)) %>%
# reduce data
select(folder_name, identifier, name, quantity)
View(data_raw)
data_raw
data_raw <- fromJSON(log_file) %>%
# unnest dataframe
unnest(cols = c(content)) %>%
# unnest dataframe
unnest(cols = c(content)) %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier)) %>%
# reduce data
select(folder_name, identifier, name, quantity)
data_raw <- fromJSON(log_file) %>%
# unnest dataframe
unnest(cols = c(content))
data_raw <- fromJSON(log_file) %>%
# unnest dataframe
pull()
View(data_raw)
data_raw <- fromJSON(log_file) %>%
unlist()
data_raw
data_raw <- fromJSON(log_file)
View(data_raw)
data_raw <- fromJSON(log_file) %>%
unlist(recursive = FALSE)
View(data_raw)
data_raw <- fromJSON(log_file) %>%
unlist(recursive = FALSE, use.names = FALSE)
data_raw <- fromJSON(log_file) %>%
unlist(recursive = FALSE, use.names = FALSE)
data_raw
data_raw <- fromJSON(log_file) %>%
map(rbind)
data_raw <- fromJSON(log_file) %>%
map(rbind)
View(data_raw)
data_raw <- fromJSON(log_file) %>%
pluck()
View(data_raw)
data_raw <- fromJSON(log_file) %>%
pluck(1)
View(data_raw)
parameter_restricted_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"67" = "camp_concentration",
"50" = "restriction")
data_raw
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
tibble()
data_raw
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
tibble(type, name)
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble()
data_raw
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble()
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(name = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(identifier = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
rename(`alternative-values` = alternative_values)
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
rename(alternative-values = alternative_values)
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
rename("alternative-values" = "alternative_values")
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
rename("alternative_values" = "alternative-values")
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(identifier = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw <- fromJSON(log_file) %>%
pluck(1) %>%
as_tibble() %>%
rename("alternative_values" = "alternative-values")
data_raw
str(data_raw)
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble() %>%
# cosmetics
rename("alternative_values" = "alternative-values")
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(identifier = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble() %>%
# cosmetics
rename("alternative_values" = "alternative-values") %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(identifier = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
enframe() %>%
# cosmetics
rename("alternative_values" = "alternative-values")
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1)
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
enframe()
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1)
data_raw
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble()
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble() %>%
# cosmetics
rename("alternative_values" = "alternative-values")
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble() %>%
# cosmetics
rename("alternative_values" = "alternative-values") %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier))
data_raw <- fromJSON(log_file) %>%
# get first element from list
pluck(1) %>%
# concert to tibble
as_tibble() %>%
# cosmetics
rename("alternative_values" = "alternative-values") %>%
# convert identifiers to factors for matching
mutate(identifier = as.factor(identifier)) %>%
# map name to parameter
mutate(identifier = ifelse(identifier %in% names(parameter_names), parameter_names[identifier], identifier))
data_raw
# get devtools
if (!require('devtools')) {
install.packages("devtools")
library(devtools)
}
# get roxygen2
if (!require('roxygen2')) {
devtools::install_github("klutometis/roxygen")
library(roxygen2)
}
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/trajectory.json"
parse_vesicle_trajectories(file)
entity_filter <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
entity_mapping <- extract_species(file) %>%
map_collector(entity_filter)
trajectory <- parse_concentrations(file, select_entities = pull(entity_mapping)) %>%
summarize_concentrations(entity_mapping)
log_file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/variations.json"
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
parse_log(log_file, parameter_names)
trajectory_log = parse_log(log_file, parameter_names)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(folder_name, identifier, name, quantity)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, name, quantity)
View(trajectory_log)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity)
View(trajectory_log)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity")
View(trajectory_log)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity") %>%
left_join(trajectory)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity") %>%
cbind(trajectory)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity") %>%
bind_cols(trajectory)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity") %>%
add_column(trajectory)
trajectory_full <- trajectory %>%
add_column(trajectory_log)
trajectory_full <- trajectory %>%
do(rbind(., trajectory_log))
trajectory_full <- trajectory %>%
do(cbind(., trajectory_log))
cbind(trajectory_full, trajectory_log)
cbind(trajectory, trajectory_log)
trajectory_full <- trajectory %>%
bind_cols(trajectory_log)
trajectory_full <- trajectory %>%
inner_join(trajectory_log)
trajectory_full <- trajectory %>%
merge(trajectory_log)
View(trajectory_log)
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity") %>%
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity")
log_file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/variations.json"
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
trajectory_log = parse_log(log_file, parameter_names) %>%
# reduce to relevant data
select(identifier, quantity) %>%
spread(key = "identifier", value = "quantity")
trajectory_full <- merge(trajectory, trajectory_log)
View(trajectory_full)
# get devtools
if (!require('devtools')) {
install.packages("devtools")
library(devtools)
}
# get roxygen2
if (!require('roxygen2')) {
devtools::install_github("klutometis/roxygen")
library(roxygen2)
}
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
trajectory_file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/trajectory.json"
log_file = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/variations.json"
entity_filter <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
entity_mapping <- extract_species(trajectory_file) %>%
map_collector(entity_filter)
trajectory <- parse_concentrations(trajectory_file, select_entities = pull(entity_mapping)) %>%
summarize_concentrations(entity_mapping) %>%
attach_parameters(log_file, parameter_names)
View(trajectory)
directory = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/"
trajectory_file = file.path(directory, "trajectory.json")
log_file = file.path(directory, "variations.json")
trajectory <- parse_concentrations(trajectory_file, select_entities = pull(entity_mapping)) %>%
# summarize entities as supplied in entitiy mapping
summarize_concentrations(entity_mapping) %>%
# attach parameter set
attach_parameters(log_file, parameter_names) %>%
# remove unnecessary column
select(-section) %>%
# write reduced data
write_csv(path = file.path(directory, "simplified_trajectory.csv"))
library(readr)
trajectory <- parse_concentrations(trajectory_file, select_entities = pull(entity_mapping)) %>%
# summarize entities as supplied in entitiy mapping
summarize_concentrations(entity_mapping) %>%
# attach parameter set
attach_parameters(log_file, parameter_names) %>%
# remove unnecessary column
select(-section) %>%
# write reduced data
write_csv(path = file.path(directory, "simplified_trajectory.csv"))
View(entity_mapping)
# get devtools
if (!require('devtools')) {
install.packages("devtools")
library(devtools)
}
# get roxygen2
if (!require('roxygen2')) {
devtools::install_github("klutometis/roxygen")
library(roxygen2)
}
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
# sample work flow
directory = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/"
trajectory_file = file.path(directory, "trajectory.json")
log_file = file.path(directory, "variations.json")
entity_filters <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
# attach parameter set
simplify_parameters(log_file, parameter_names)
# get devtools
if (!require('devtools')) {
install.packages("devtools")
library(devtools)
}
# get roxygen2
if (!require('roxygen2')) {
devtools::install_github("klutometis/roxygen")
library(roxygen2)
}
setwd("~/drive/work/programming/R/singaEvaluate/")
document()
load_all("~/drive/work/programming/R/singaEvaluate/")
# sample work flow
directory = "/home/leberech/git/model-data/raw_data/test/observations/base_unrestricted_single_500/2019-10-17T11-44-35-986Z/"
trajectory_file = file.path(directory, "trajectory.json")
log_file = file.path(directory, "variations.json")
entity_filters <- list(
"AQP"  = ~ str_detect(entity, pattern = "AQP2") & !str_detect(entity, pattern = "(-P-|-P$)"),
"AQPP" = ~ str_detect(entity, pattern = "AQP2") & str_detect(entity, pattern = "(-P-|-P$)")
)
parameter_names = c("34" = "camp_binding",
"88" = "camp_hydrolysis",
"65" = "camp_concentration",
"50" = "restriction")
entity_mapping <- extract_species(trajectory_file) %>%
map_collector(entity_filters)
simplify_experiment(directory, entity_mapping, parameter_names)
